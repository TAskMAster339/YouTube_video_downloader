name: Auto Build and Release on yt-dlp Update

on:
  schedule:
    # Проверка каждый день в 03:00 UTC (06:00 MSK)
    - cron: "0 3 * * *"
  workflow_dispatch: # Ручной запуск

permissions:
  contents: write
  pull-requests: write

jobs:
  check-update:
    runs-on: ubuntu-latest
    outputs:
      update_available: ${{ steps.check.outputs.update_available }}
      current_version: ${{ steps.check.outputs.current_version }}
      latest_version: ${{ steps.check.outputs.latest_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Check for yt-dlp updates
        id: check
        run: |
          CURRENT=$(grep "^yt-dlp" requirements.txt | sed 's/yt-dlp==//g')
          echo "current_version=$CURRENT" >> $GITHUB_OUTPUT

          python -m pip install --upgrade pip
          LATEST=$(python -c "import urllib.request, json; data = json.loads(urllib.request.urlopen('https://pypi.org/pypi/yt-dlp/json').read()); print(data['info']['version'])")
          echo "latest_version=$LATEST" >> $GITHUB_OUTPUT

          if [ "$CURRENT" != "$LATEST" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
            echo "✅ Update available: $CURRENT → $LATEST"
          else
            echo "update_available=false" >> $GITHUB_OUTPUT
            echo "⏭️ No update needed (current: $CURRENT)"
          fi

  update-and-build:
    needs: check-update
    if: needs.check-update.outputs.update_available == 'true'
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Update requirements.txt
        run: |
          $current = "${{ needs.check-update.outputs.current_version }}"
          $latest = "${{ needs.check-update.outputs.latest_version }}"
          (Get-Content requirements.txt) -replace "yt-dlp==$current", "yt-dlp=$latest" | Set-Content requirements.txt
          echo "Updated: yt-dlp $current → $latest"
          cat requirements.txt | findstr yt-dlp

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download FFmpeg
        run: |
          echo "Downloading FFmpeg..."

          Invoke-WebRequest -Uri "https://github.com/yt-dlp/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip" `
            -OutFile "ffmpeg.zip" -ErrorAction SilentlyContinue

          if (Test-Path "ffmpeg.zip") {
            echo "FFmpeg downloaded successfully"
            Expand-Archive -Path "ffmpeg.zip" -DestinationPath "."
            $folder = Get-ChildItem -Directory -Filter "ffmpeg-*" | Select-Object -First 1
            if ($folder) {
              Move-Item -Path "$($folder.FullName)\bin\ffmpeg.exe" -Destination "ffmpeg.exe" -Force
              Remove-Item $folder.FullName -Recurse -Force
            }
            Remove-Item "ffmpeg.zip" -Force
            echo "✅ FFmpeg ready"
          } else {
            echo "⚠️ Could not download FFmpeg, will use system version"
          }

      - name: Build executable with PyInstaller
        run: |
          echo "Building with PyInstaller..."
          pyinstaller app.spec

          if (Test-Path "dist/YouTube_Downloader.exe") {
            echo "✅ Build successful"
            Get-Item "dist/YouTube_Downloader.exe" | Format-List
          } else {
            echo "❌ Build failed"
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: YouTube_Downloader
          path: dist/YouTube_Downloader.exe
          retention-days: 30

      - name: Create versioned release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-update.outputs.latest_version }}
          name: v${{ needs.check-update.outputs.latest_version }}
          body: |
            ## 🚀 YouTube Downloader v${{ needs.check-update.outputs.latest_version }}

            ### 📝 Updates
            - **yt-dlp**: Updated from ${{ needs.check-update.outputs.current_version }} to ${{ needs.check-update.outputs.latest_version }}

            ### 📥 Downloads
            - **YouTube_Downloader.exe** - Windows 64-bit executable

            ### ⚙️ Requirements
            - Windows 10 or later
            - Internet connection
            - No installation required - just run the .exe!

            ### 🔗 References
            - [yt-dlp Release Notes](https://github.com/yt-dlp/yt-dlp/releases/tag/${{ needs.check-update.outputs.latest_version }})
            - [View all releases](https://github.com/${{ github.repository }}/releases)
          files: |
            dist/YouTube_Downloader.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Release
          body: |
            ## 🚀 YouTube Downloader (Latest Build)

            **yt-dlp version**: ${{ needs.check-update.outputs.latest_version }}

            This is the latest stable build with the most recent yt-dlp updates.

            💾 **Download YouTube_Downloader.exe** below and run it!

            📖 [View all releases](https://github.com/${{ github.repository }}/releases)
          files: |
            dist/YouTube_Downloader.exe
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push updated requirements.txt
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add requirements.txt
          git commit -m "chore: update yt-dlp to ${{ needs.check-update.outputs.latest_version }}" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Workflow summary
        run: |
          echo "## ✅ Workflow completed successfully!" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "- yt-dlp: ${{ needs.check-update.outputs.current_version }} → ${{ needs.check-update.outputs.latest_version }}" >> $env:GITHUB_STEP_SUMMARY
          echo "- requirements.txt: Updated ✅" >> $env:GITHUB_STEP_SUMMARY
          echo "- Build: Successful ✅" >> $env:GITHUB_STEP_SUMMARY
          echo "- Release: Published ✅" >> $env:GITHUB_STEP_SUMMARY
