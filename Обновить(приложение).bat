@echo off
REM YouTube Downloader Auto-Update Script
REM –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π exe —Å GitHub –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π
REM –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

setlocal enabledelayedexpansion

REM ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
set GITHUB_OWNER=TAskMAster339
set GITHUB_REPO=YouTube_video_downloader
set ASSET_NAME=YouTube_Downloader.exe

REM ==================== –ü–ê–ü–ö–ò ====================
set SCRIPT_DIR=%~dp0
set APP_PATH=%SCRIPT_DIR%%ASSET_NAME%
set TEMP_FILE=%SCRIPT_DIR%YouTube_Downloader.exe.tmp
set BACKUP_PATH=%SCRIPT_DIR%%ASSET_NAME%.backup
set JSON_FILE=%SCRIPT_DIR%release.json
set URL_FILE=%SCRIPT_DIR%download_url.txt
set VER_FILE=%SCRIPT_DIR%version.txt

REM ==================== –í–´–í–û–î ====================
cls
echo.
echo ============================================================
echo üîÑ YouTube Downloader Auto-Update
echo ============================================================
echo.

REM ==================== –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ ====================
echo [*] Checking GitHub for updates...

set API_URL=https://api.github.com/repos/%GITHUB_OWNER%/%GITHUB_REPO%/releases/latest

REM –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
powershell -NoProfile -Command "try { Invoke-WebRequest -Uri '%API_URL%' -OutFile '%JSON_FILE%' -TimeoutSec 10 -ErrorAction Stop } catch { exit 1 }" >nul 2>&1

if errorlevel 1 (
    echo [!] ERROR: Could not connect to GitHub
    echo.
    echo Make sure you have internet connection and GitHub is accessible
    echo.
    pause
    exit /b 1
)

if not exist "%JSON_FILE%" (
    echo [!] ERROR: Failed to download release info
    pause
    exit /b 1
)

REM ==================== –®–ê–ì 2: –ü–∞—Ä—Å–∏–º JSON –∏ –ø–æ–ª—É—á–∞–µ–º URL ====================
echo [*] Parsing release information...

powershell -NoProfile -Command ^
  "$json = Get-Content '%JSON_FILE%' -Raw | ConvertFrom-Json; " ^
  "$version = $json.tag_name; " ^
  "$asset = $json.assets | Where-Object { $_.name -eq '%ASSET_NAME%' } | Select-Object -First 1; " ^
  "if ($asset) { " ^
  "[System.IO.File]::WriteAllText('%URL_FILE%', $asset.browser_download_url); " ^
  "[System.IO.File]::WriteAllText('%VER_FILE%', $version); " ^
  "} else { " ^
  "exit 1 " ^
  "}" >nul 2>&1

if errorlevel 1 (
    echo [!] ERROR: Could not find %ASSET_NAME% in release
    del /f /q "%JSON_FILE%" 2>nul
    pause
    exit /b 1
)

REM –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
if not exist "%URL_FILE%" (
    echo [!] ERROR: Failed to parse URL
    pause
    exit /b 1
)

set /p DOWNLOAD_URL=<"%URL_FILE%"
set /p NEW_VERSION=<"%VER_FILE%"

if "!DOWNLOAD_URL!"=="" (
    echo [!] ERROR: Download URL is empty
    pause
    exit /b 1
)

echo [+] Found version: !NEW_VERSION!
echo.

REM ==================== –®–ê–ì 3: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª ====================
echo ============================================================
echo ‚¨áÔ∏è  Downloading update...
echo ============================================================
echo.

REM –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PowerShell (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
powershell -NoProfile -Command ^
  "try { " ^
  "$ProgressPreference = 'SilentlyContinue'; " ^
  "Invoke-WebRequest -Uri '!DOWNLOAD_URL!' -OutFile '%TEMP_FILE%' -TimeoutSec 300 -ErrorAction Stop; " ^
  "} catch { " ^
  "exit 1 " ^
  "}" >nul 2>&1

if errorlevel 1 (
    echo [!] ERROR: Failed to download
    del /f /q "%JSON_FILE%" "%URL_FILE%" "%VER_FILE%" 2>nul
    pause
    exit /b 1
)

if not exist "%TEMP_FILE%" (
    echo [!] ERROR: Downloaded file not found
    del /f /q "%JSON_FILE%" "%URL_FILE%" "%VER_FILE%" 2>nul
    pause
    exit /b 1
)

echo [+] Download complete
echo.

REM ==================== –®–ê–ì 4: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ====================
echo [*] Stopping application...
taskkill /IM "%ASSET_NAME%" /F 2>nul
timeout /t 1 /nobreak >nul

REM ==================== –®–ê–ì 5: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é ====================
if exist "%APP_PATH%" (
    echo [*] Creating backup...
    if exist "%BACKUP_PATH%" del /f /q "%BACKUP_PATH%" 2>nul
    copy "%APP_PATH%" "%BACKUP_PATH%" >nul
    if errorlevel 1 (
        echo [!] WARNING: Backup failed, but continuing...
    )
)

REM ==================== –®–ê–ì 6: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é ====================
echo.
echo ============================================================
echo üì¶ Installing update...
echo ============================================================
echo.

REM –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
if exist "%APP_PATH%" (
    del /f /q "%APP_PATH%" 2>nul
    if errorlevel 1 (
        echo [!] ERROR: Could not delete old version
        echo Trying to restore backup...
        if exist "%BACKUP_PATH%" (
            copy "%BACKUP_PATH%" "%APP_PATH%" >nul
        )
        del /f /q "%TEMP_FILE%" 2>nul
        del /f /q "%JSON_FILE%" "%URL_FILE%" "%VER_FILE%" 2>nul
        pause
        exit /b 1
    )
)

REM –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
copy "%TEMP_FILE%" "%APP_PATH%" >nul
if errorlevel 1 (
    echo [!] ERROR: Installation failed
    if exist "%BACKUP_PATH%" (
        echo [*] Restoring backup...
        copy "%BACKUP_PATH%" "%APP_PATH%" >nul
    )
    del /f /q "%TEMP_FILE%" 2>nul
    del /f /q "%JSON_FILE%" "%URL_FILE%" "%VER_FILE%" 2>nul
    pause
    exit /b 1
)

if exist "%APP_PATH%" (
    echo [+] Update installed successfully!
) else (
    echo [!] ERROR: Installation verification failed
    del /f /q "%JSON_FILE%" "%URL_FILE%" "%VER_FILE%" 2>nul
    pause
    exit /b 1
)

REM ==================== –®–ê–ì 7: –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ====================
echo [*] Cleaning up...
del /f /q "%TEMP_FILE%" 2>nul
del /f /q "%JSON_FILE%" 2>nul
del /f /q "%URL_FILE%" 2>nul
del /f /q "%VER_FILE%" 2>nul

REM ==================== –®–ê–ì 8: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ====================
echo.
echo üöÄ Launching application...
start "" "%APP_PATH%"

echo.
echo ‚úÖ Update completed successfully!
echo.

timeout /t 2 /nobreak >nul
exit /b 0
